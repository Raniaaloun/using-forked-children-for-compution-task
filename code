#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/mman.h>


int sum=0;
int updated_counter = 1; 
void *runner(int *v)
{

	int i,upper=v;
	for(i=0;i<upper;i++){
		sum = sum + updated_counter;
		updated_counter = updated_counter + 1;
		            }
}

 
int main(int argc, char *argv[]) {
  const int size = 4096;
  const char *name = "sumWork", *name2 = "CounterWork";
  int shm_fd, shm_fd2;
  char *ptr, *ptr2;
  shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666);
  ftruncate(shm_fd, size);
  ptr = mmap(0,size, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
  
  shm_fd2 = shm_open(name2, O_CREAT | O_RDWR, 0666);
  ftruncate(shm_fd2, size);
  ptr2 = mmap(0,size, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd2, 0);

  if (ptr == MAP_FAILED || ptr2 == MAP_FAILED) {
	printf("Map failed\n");
	return -1;
	                 }
  if(argc != 2){  
		printf("Usage: file.o <integer value>\n");
		return -1;
	       }

  if(atoi(argv[1])<0){
	        printf("Usage: file.o <integer value>\n");
	        return -1;
			   }

	int value=atoi(argv[1]);
	int Chunk_size = value/4;
	int Number_of_tasks = value / 2;
	if (value % 2 != 0)
	Number_of_tasks++;
  
        pid_t firstChild, secondChild, thirdChild, forthChild; int sum1;

        firstChild = fork();
        if(firstChild == 0) {
        runner(Chunk_size);
        sprintf(ptr, "%d\n", sum); //write sum to memory 1
        sprintf(ptr2, "%d\n", updated_counter); //write counter to memory 2
        exit(0);
                            }
        else if (firstChild >0) {
        wait(NULL);
                                }
	else {
		fprintf(stderr,"fork Failed\n");
		return -1; 
	      }
	
       secondChild = fork();
       if(secondChild == 0) {
       sum = atoi(ptr);
       updated_counter= atoi(ptr2);
       runner(Chunk_size);
       sprintf(ptr, "%d\n", sum); //write sum to memory 1
       sprintf(ptr2, "%d\n", updated_counter); //write counter to memory 2
       exit(0);
                            }
       else if (secondChild >0) {
       wait(NULL);
                                }
 	else {
		fprintf(stderr,"fork Failed\n");
		return -1; 
	      }

      thirdChild = fork();
      if(thirdChild == 0) {
      sum = atoi(ptr);
      updated_counter= atoi(ptr2);
      runner(Chunk_size);
      sprintf(ptr, "%d\n", sum); //write sum to memory 1
      sprintf(ptr2, "%d\n", updated_counter); //write counter to memory 2 
      exit(0);
                        }
      else if (thirdChild >0) {
      wait(NULL);
                              }
	 else {
		fprintf(stderr,"fork Failed\n");
		return -1; 
	      }

	forthChild = fork();
        if(forthChild == 0) {
        sum = atoi(ptr);
        updated_counter= atoi(ptr2);
        Chunk_size = value - (updated_counter -1);
        runner(Chunk_size);
        sprintf(ptr, "%d\n", sum); //write sum to memory 1
        sprintf(ptr2, "%d\n", updated_counter); //write counter to memory 2
        exit(0);
                        }
        else if (forthChild >0) {
        wait(NULL);
                                }
	else {
		fprintf(stderr,"fork Failed\n");
		return -1; 
	      }

  
        shm_fd = shm_open(name, O_RDONLY, 0666);
        printf("sum = %s",ptr);
    
        return EXIT_SUCCESS; return 0;
}
